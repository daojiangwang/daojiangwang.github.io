<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>djwang呀</title>
  
  <subtitle>时至今日你仍是我的光芒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-26T08:25:27.796Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>djwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RestController和@Controller的区别</title>
    <link href="http://yoursite.com/2020/03/26/RestController/"/>
    <id>http://yoursite.com/2020/03/26/RestController/</id>
    <published>2020-03-26T07:46:44.000Z</published>
    <updated>2020-05-26T08:25:27.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Controller-返回一个页面"><a href="#Controller-返回一个页面" class="headerlink" title="@Controller 返回一个页面"></a>@Controller 返回一个页面</h3> <a id="more"></a><p>单独使用 @Controller 不加 @ResponseBody的一般用于在返回一个页面，基本用于传统的Spring MVC 的应用，对应于前后端不分离的情况。<br><img src="/images/202005/Controller.png" alt="@Controller"></p><h3 id="RestController-Spring4之后开发-返回JSON或XML形式数据"><a href="#RestController-Spring4之后开发-返回JSON或XML形式数据" class="headerlink" title="@RestController(Spring4之后开发) 返回JSON或XML形式数据"></a>@RestController(Spring4之后开发) 返回JSON或XML形式数据</h3><p>@RestController只返回对象，对象数据直接以 JSON 或 XML 形式写入 HTTP 响应(Response)中，这种情况属于 RESTful Web服务，适用于目前主流的前后端分离开发。<br><img src="/images/202005/RestController.png" alt="@RestController"><br>相当于 @Controller +@ResponseBody，@ResponseBody 注解的作用是将 Controller 的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到HTTP 响应(Response)对象的 body 中，通常用来返回 JSON 或者 XML 数据，返回 JSON 数据的情况比较多。<br><img src="/images/202005/CtrlviaResponseBody.png" alt="Spring 3.x"></p><p>图源：JavaGuide</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Controller-返回一个页面&quot;&gt;&lt;a href=&quot;#Controller-返回一个页面&quot; class=&quot;headerlink&quot; title=&quot;@Controller 返回一个页面&quot;&gt;&lt;/a&gt;@Controller 返回一个页面&lt;/h3&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架</title>
    <link href="http://yoursite.com/2020/03/23/SpringFramework/"/>
    <id>http://yoursite.com/2020/03/23/SpringFramework/</id>
    <published>2020-03-23T04:46:44.000Z</published>
    <updated>2020-05-26T08:13:25.371Z</updated>
    
    <content type="html"><![CDATA[<p>Spring框架可在任何类型的部署平台上为基于Java的现代企业应用程序提供全面的编程和配置模型<br><a id="more"></a></p><h3 id="Spring六大特征："><a href="#Spring六大特征：" class="headerlink" title="Spring六大特征："></a>Spring六大特征：</h3><ul><li>核心技术：依赖注入，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP（面向切面编程）；</li><li>测试：模拟对象，TestContext框架，Spring MVC测试，WebTestClient；</li><li>数据访问：事务，DAO支持，JDBC，ORM（对象关系映射），组件XML；</li><li>Web支持：Spring MVC和Spring WebFlux Web框架；</li><li>集成：远程处理，JMS，JCA，JMX，电子邮件，任务，调度，缓存；</li><li>语言：Kotlin（JetBrains开发），Groovy，动态语言；</li></ul><h3 id="Spring-重要模块"><a href="#Spring-重要模块" class="headerlink" title="Spring 重要模块"></a>Spring 重要模块</h3><p><img src="/images/202005/SpringFrameworkRuntime.png" alt="Spring 4.x"></p><ul><li>Spring Core： 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IoC 依赖注入功能。</li><li>Spring Aspects ： 该模块为与AspectJ的集成提供支持。</li><li>Spring AOP ：提供了面向切面的编程实现。</li><li>Spring JDBC : Java数据库连接。</li><li>Spring JMS ：Java消息服务。</li><li>Spring ORM : 用于支持Hibernate等ORM工具。</li><li>Spring Web : 为创建Web应用程序提供支持。</li><li>Spring Test : 提供了对 JUnit 和 TestNG 测试的支持。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring框架可在任何类型的部署平台上为基于Java的现代企业应用程序提供全面的编程和配置模型&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SPA</title>
    <link href="http://yoursite.com/2020/03/08/SPA/"/>
    <id>http://yoursite.com/2020/03/08/SPA/</id>
    <published>2020-03-08T09:17:45.000Z</published>
    <updated>2020-03-08T09:25:59.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><p>单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。</p><a id="more"></a><h3 id="SPA的特点："><a href="#SPA的特点：" class="headerlink" title="SPA的特点："></a>SPA的特点：</h3><ul><li>速度：更好的用户体验，让用户在web app感受native app的速度和流畅，</li><li>MVVM：经典MVVM开发模式，前后端各负其责。</li><li>ajax：重前端，业务逻辑全部在本地操作，数据都需要通过AJAX同步、提交。</li><li>路由：在URL中采用#号来作为当前视图的地址,改变#号后的参数，页面并不会重载<h3 id="SPA的两个缺点："><a href="#SPA的两个缺点：" class="headerlink" title="SPA的两个缺点："></a>SPA的两个缺点：</h3></li><li>首屏渲染等待时长： 必须得加载完毕，才能渲染出首屏</li><li>seo不友好：爬虫只能拿到一个div，认为页面是空的，不利于seo<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3></li><li>用循环的视角审视Web应用开发</li><li>框定一个一致的SPA图形用户界面（GUI）和模型</li><li>将SPA的原则带回服务器端</li><li>聚集于对合适的应用进行早期SPA开发 [3]<h3 id="SPA的优缺点"><a href="#SPA的优缺点" class="headerlink" title="SPA的优缺点"></a>SPA的优缺点</h3>单页Web程序的出现是客户端发展的必然结果，但是该技术也是有些局限性，所以采用之前需要了解清楚它的优缺点。</li></ul><p>1、优点：<br>1). 良好的交互体验<br>用户不需要重新刷新页面，获取数据也是通过Ajax异步获取，页面显示流畅。<br>2). 良好的前后端工作分离模式<br>单页Web应用可以和RESTful规约一起使用，通过REST API提供接口数据，并使用Ajax异步获取，这样有助于分离客户端和服务器端工作。更进一步，可以在客户端也可以分解为静态页面和页面交互两个部分。<br>3). 减轻服务器压力<br>服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；<br>4). 共用一套后端程序代码<br>不用修改后端程序代码就可以同时用于Web界面、手机、平板等多种客户端；</p><p>2、缺点：<br>1). SEO难度较高<br>由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，且要用单页应用，那么就做些静态页面给搜索引擎用吧。<br>2). 前进、后退管理<br>由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理，当然此问题也有解决方案，比如利用URI中的散列+iframe实现。<br>3). 初次加载耗时多<br>为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理，如果使用第三方库，建议使用一些大公司的CDN，因此带宽的消耗是必然的。</p><p>转自<a href="https://www.jianshu.com/p/dcea4d914b65" target="_blank" rel="noopener">雄霸烽火狼</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SPA&quot;&gt;&lt;a href=&quot;#SPA&quot; class=&quot;headerlink&quot; title=&quot;SPA&quot;&gt;&lt;/a&gt;SPA&lt;/h2&gt;&lt;p&gt;单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>优化网站加载速度的34条法则，Yahoo!</title>
    <link href="http://yoursite.com/2020/03/05/%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E7%9A%8434%E6%9D%A1%E6%B3%95%E5%88%99,%20Yahoo!/"/>
    <id>http://yoursite.com/2020/03/05/优化网站加载速度的34条法则, Yahoo!/</id>
    <published>2020-03-05T12:16:09.000Z</published>
    <updated>2020-03-05T12:40:37.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Minimize-HTTP-Requests-减少-HTTP-请求"><a href="#1-Minimize-HTTP-Requests-减少-HTTP-请求" class="headerlink" title="1.Minimize HTTP Requests　　减少 HTTP 请求"></a>1.Minimize HTTP Requests　　减少 HTTP 请求</h3><p>　　图片、css、script、flash等等这些都会增加http请求数，减少这些元素的数量就能减少响应时间。把多个JS、CSS在可能的情况下写进一个文件，页面里直接写入图片也是不好的做法，应该写进CSS里，利用 CSS sprites 将小图拼合后利用background来定位。</p><h3 id="2-Use-a-Content-Delivery-Network-利用-CDN-技术"><a href="#2-Use-a-Content-Delivery-Network-利用-CDN-技术" class="headerlink" title="2.Use a Content Delivery Network　　利用 CDN 技术"></a>2.Use a Content Delivery Network　　利用 CDN 技术</h3><h3 id="3-Add-an-Expires-or-a-Cache-Control-Header-设置头文件过期或者静态缓存"><a href="#3-Add-an-Expires-or-a-Cache-Control-Header-设置头文件过期或者静态缓存" class="headerlink" title="3.Add an Expires or a Cache-Control Header　　设置头文件过期或者静态缓存"></a>3.Add an Expires or a Cache-Control Header　　设置头文件过期或者静态缓存</h3><p>　　浏览器会用缓存来减少http请求数来加快页面加载的时间，如果页面头部加一个很长的过期时间，浏览器就会一直缓存页面里的元素。不过这样如果页面里的东西变动的话就要改名字了，否则用户端不会主动刷新，看自己衡量了~ 这项可以通过修改.htaccess文件来实现。<br><a id="more"></a></p><h3 id="4-Gzip-Components-Gzip压缩"><a href="#4-Gzip-Components-Gzip压缩" class="headerlink" title="4.Gzip Components　　Gzip压缩"></a>4.Gzip Components　　Gzip压缩</h3><p>　　Gzip格式是一种很普遍的压缩技术，几乎所有的浏览器都有解压Gzip格式的能力，而且它可以压缩的比例非常大，一般压缩率为85%。压缩没压缩，可以到 这里 做下测试。</p><h3 id="5-Put-Stylesheets-at-the-Top-把CSS放顶部"><a href="#5-Put-Stylesheets-at-the-Top-把CSS放顶部" class="headerlink" title="5.Put Stylesheets at the Top　　把CSS放顶部"></a>5.Put Stylesheets at the Top　　把CSS放顶部</h3><p>　　让浏览者能尽早的看到网站的完整样式。</p><h3 id="6-Put-Scripts-at-the-Bottom-把-JS-放底部"><a href="#6-Put-Scripts-at-the-Bottom-把-JS-放底部" class="headerlink" title="6.Put Scripts at the Bottom　　把 JS 放底部"></a>6.Put Scripts at the Bottom　　把 JS 放底部</h3><p>　　网站呈现完毕后再进行功能设置，当然这些JS要在你的加载过程中不影响内容表现。</p><h3 id="7-Avoid-CSS-Expressions-避免-CSS-Expressions"><a href="#7-Avoid-CSS-Expressions-避免-CSS-Expressions" class="headerlink" title="7.Avoid CSS Expressions　　避免 CSS Expressions"></a>7.Avoid CSS Expressions　　避免 CSS Expressions</h3><p>　　CSS表达式很可怕，这个只被IE支持的东西执行时候的运算量非常大，你移动一下鼠标它都要进行重计算的，但有时候为了做浏览器的兼容必须要用到这个</p><h3 id="8-Make-JavaScript-and-CSS-External-将-JS-和-CSS-外链"><a href="#8-Make-JavaScript-and-CSS-External-将-JS-和-CSS-外链" class="headerlink" title="8.Make JavaScript and CSS External　　将 JS 和 CSS 外链"></a>8.Make JavaScript and CSS External　　将 JS 和 CSS 外链</h3><p>　　前面讲到了缓存这个事情，一些较为公用的JS和CSS，我们可以使用外链的形式，譬如我就是从Google外链来的jQuery文件，如果我的浏览者在浏览别的使用了这个外链文件的网站时已经下载并缓存了这个文件，那么他在浏览我的网站的时候就不需要再进行下载了！~</p><h3 id="9-Reduce-DNS-Lookups-减少DNS查找"><a href="#9-Reduce-DNS-Lookups-减少DNS查找" class="headerlink" title="9.Reduce DNS Lookups　　减少DNS查找"></a>9.Reduce DNS Lookups　　减少DNS查找</h3><p>　　貌似是要减少网站从外部调用资源，我的Google分析和picasa的外链图片都算在里面了。</p><h3 id="10-Minify-JavaScript-and-CSS-减小-JS-和-CSS-的体积"><a href="#10-Minify-JavaScript-and-CSS-减小-JS-和-CSS-的体积" class="headerlink" title="10.Minify JavaScript and CSS　　减小 JS 和 CSS 的体积"></a>10.Minify JavaScript and CSS　　减小 JS 和 CSS 的体积</h3><p>　　写JS和CSS都是有技巧的，用最少的代码实现同样的功能，减少空白，增强逻辑性，用缩写方式等等，当然也有不少工具也能够帮你实现</p><h3 id="11-Avoid-Redirects-避免重定向"><a href="#11-Avoid-Redirects-避免重定向" class="headerlink" title="11.Avoid Redirects　　避免重定向"></a>11.Avoid Redirects　　避免重定向</h3><p>　　在写入链接时，虽然”<a href="http://www.today-s-ooxx..com&quot;" target="_blank" rel="noopener">http://www.today-s-ooxx..com&quot;</a> 和 “<a href="http://www.today-s-ooxx..com/&quot;" target="_blank" rel="noopener">http://www.today-s-ooxx..com/&quot;</a> 仅有一个最后的”/”只差，但是结果是不同的，服务器需要花时间把前者重定向为后者然后进行跳转，这个要自己注意，也可以在Apache里用Alias 或者mod_rewrite或者DirectorySlash解决。</p><h3 id="12-Remove-Duplicate-Scripts-删除重复脚本"><a href="#12-Remove-Duplicate-Scripts-删除重复脚本" class="headerlink" title="12.Remove Duplicate Scripts　　删除重复脚本"></a>12.Remove Duplicate Scripts　　删除重复脚本</h3><p>　　重复调用的代码浏览器并不会识别忽略，而是会再次运算一遍，这当然是大大的浪费。</p><h3 id="13-Configure-ETags-配置-ETags"><a href="#13-Configure-ETags-配置-ETags" class="headerlink" title="13.Configure ETags　　配置 ETags"></a>13.Configure ETags　　配置 ETags</h3><p>　　搞不清楚咋回事，总之我是在.htaccess里把它删除了。</p><h3 id="14-Make-Ajax-Cacheable-缓存-Ajax"><a href="#14-Make-Ajax-Cacheable-缓存-Ajax" class="headerlink" title="14.Make Ajax Cacheable　　缓存 Ajax"></a>14.Make Ajax Cacheable　　缓存 Ajax</h3><p>　　Ajax是实时响应的，在浏览器接收到新的数据前，旧的数据被缓存，这样能够更好的提高效率。</p><h3 id="15-Flush-the-Buffer-Early-尽早的释放缓冲"><a href="#15-Flush-the-Buffer-Early-尽早的释放缓冲" class="headerlink" title="15.Flush the Buffer Early　　尽早的释放缓冲"></a>15.Flush the Buffer Early　　尽早的释放缓冲</h3><p>　　当用户进行页面请求时，服务器端需要花费200到500毫秒时间来拼合HTML，将写在head与body之间，释放缓冲，这样可以将文件头先发送出去，然后再发送文件内容，提高效率。</p><h3 id="16-Use-GET-for-AJAX-Requests-用-GET-方式进行-AJAX-请求"><a href="#16-Use-GET-for-AJAX-Requests-用-GET-方式进行-AJAX-请求" class="headerlink" title="16.Use GET for AJAX Requests　　用 GET 方式进行 AJAX 请求"></a>16.Use GET for AJAX Requests　　用 GET 方式进行 AJAX 请求</h3><p>　　Get 方法和服务器只有一次交互（发送数据），而 Post 要两次（发送头部再发送数据）。</p><h3 id="17-Post-load-Components-延迟加载组件"><a href="#17-Post-load-Components-延迟加载组件" class="headerlink" title="17.Post-load Components　　延迟加载组件*"></a>17.Post-load Components　　延迟加载组件*</h3><p>　　最先加载必须的组件进行页面初始化，然后再加载其他，YUI Image Loader 是很好的例子。</p><h3 id="18-Preload-components-预加载组件"><a href="#18-Preload-components-预加载组件" class="headerlink" title="18.Preload components　　预加载组件"></a>18.Preload components　　预加载组件</h3><p>　　提前加载以后可能用到的东西，和延迟加载并不冲突，它的目的是为后续请求提供更快的响应，参见Google首页上的CSS sprites应用。</p><h3 id="19-Reduce-the-Number-of-DOM-Elements-减少-DOM-元素数量"><a href="#19-Reduce-the-Number-of-DOM-Elements-减少-DOM-元素数量" class="headerlink" title="19.Reduce the Number of DOM Elements　　减少 DOM 元素数量"></a>19.Reduce the Number of DOM Elements　　减少 DOM 元素数量</h3><p>　　复杂的页面结构意味着更长的下载及响应时间，更合理更高效的使用标签来架构页面，是好的前端的必备条件。</p><h3 id="20-Split-Components-Across-Domains-跨域分离组件"><a href="#20-Split-Components-Across-Domains-跨域分离组件" class="headerlink" title="20.Split Components Across Domains　　跨域分离组件"></a>20.Split Components Across Domains　　跨域分离组件</h3><p>　　页面组件多个来源可以增大你的平行下载量，但注意不要过多，超过2-4个域名会引起上面说到的DNS查找浪费。</p><h3 id="21-Minimize-the-Number-of-iframes-减少-iframe-数量"><a href="#21-Minimize-the-Number-of-iframes-减少-iframe-数量" class="headerlink" title="21.Minimize the Number of iframes　　减少 iframe 数量"></a>21.Minimize the Number of iframes　　减少 iframe 数量</h3><p>　　需要更有效的利用 ifames。<br>　　iframe 优点：有利于下载缓慢的广告等第三方内容，安全沙箱，并行下载脚本<br>　　iframe 缺点：即使为空也会有较大资源消耗，会阻止页面的onload，非语义</p><h3 id="22-No-404s-不要出现-404-页面"><a href="#22-No-404s-不要出现-404-页面" class="headerlink" title="22.No 404s　　不要出现 404 页面"></a>22.No 404s　　不要出现 404 页面</h3><p>　　站点本身里（非搜索结果）出现404页面，无意义的404页面会影响用户体验并且会消耗服务器资源。</p><h3 id="23-Reduce-Cookie-Size-减小-Cookie"><a href="#23-Reduce-Cookie-Size-减小-Cookie" class="headerlink" title="23.Reduce Cookie Size　　减小 Cookie"></a>23.Reduce Cookie Size　　减小 Cookie</h3><p>　　Cookie在服务器及浏览器之间的通过文件头进行交换，尽可能减小Cookie体积，设置合理的过期时间，能够很好的提高效率。</p><h3 id="24-Use-Cookie-free-Domains-for-Components-对组件使用无Cookie的域名"><a href="#24-Use-Cookie-free-Domains-for-Components-对组件使用无Cookie的域名" class="headerlink" title="24.Use Cookie-free Domains for Components　　对组件使用无Cookie的域名"></a>24.Use Cookie-free Domains for Components　　对组件使用无Cookie的域名</h3><p>　　对静态组件的Cookie读取是一种浪费，使用另一个无Cookie的域名来存放你的静态组件式一个好方法，或者也可以在Cookie中只存放带www的域名。</p><h3 id="25-Minimize-DOM-Access-减少DOM的访问次数"><a href="#25-Minimize-DOM-Access-减少DOM的访问次数" class="headerlink" title="25.Minimize DOM Access　　减少DOM的访问次数"></a>25.Minimize DOM Access　　减少DOM的访问次数</h3><p>　　JS访问DOM是很慢的，尽量不要用JS来设置页面布局。</p><h3 id="26-Develop-Smart-Event-Handlers-开发灵活的事件处理句柄"><a href="#26-Develop-Smart-Event-Handlers-开发灵活的事件处理句柄" class="headerlink" title="26.Develop Smart Event Handlers　　开发灵活的事件处理句柄"></a>26.Develop Smart Event Handlers　　开发灵活的事件处理句柄</h3><p>　　DOM树上过多的元素被加入事件句柄的话，反应效率肯定会低，YUI事件工具有一个 onAvailable 方法可以帮助你灵活的设置DOM事件句柄</p><h3 id="27-Choose-lt-link-gt-over-import-使用-而非-import"><a href="#27-Choose-lt-link-gt-over-import-使用-而非-import" class="headerlink" title="27.Choose &lt; link &gt;over @import　　使用 而非 @import"></a>27.Choose &lt; link &gt;over @import　　使用 <link>而非 @import</h3><p>　　在IE中使用@import就和在页面底部用&lt; link &gt;一样，我们前面说要把&lt; link &gt;放顶部的。</p><h3 id="28-Avoid-Filters-避免过滤器的使用"><a href="#28-Avoid-Filters-避免过滤器的使用" class="headerlink" title="28.Avoid Filters　　避免过滤器的使用"></a>28.Avoid Filters　　避免过滤器的使用</h3><p>　　如果需要Alpha透明，不要使用AlphaImageLoader，它效率低下而且只对IE6及以下的版本适用，用PNG8图片。如果你非要使用，加上_filter以免影响IE7+用户。</p><h3 id="29-Optimize-Images-优化图片"><a href="#29-Optimize-Images-优化图片" class="headerlink" title="29.Optimize Images　　优化图片"></a>29.Optimize Images　　优化图片</h3><p>　　将你的GIF转为PNG8会是个减小体积的好办法，另外有很多方法处理你的JPG及PNG图片以达到优化效果。</p><h3 id="30-Optimize-CSS-Sprites-优化-CSS-精灵图"><a href="#30-Optimize-CSS-Sprites-优化-CSS-精灵图" class="headerlink" title="30.Optimize CSS Sprites　　优化 CSS 精灵图"></a>30.Optimize CSS Sprites　　优化 CSS 精灵图</h3><p>　　在CSS 精灵图中竖直并尽量紧凑的排列图片，尽量将颜色相似的图片排在一起，会减小图片本身的大小及提高页面图片显示速度。</p><h3 id="31-Don’t-Scale-Images-in-HTML-不要在-HTML中-缩放图片"><a href="#31-Don’t-Scale-Images-in-HTML-不要在-HTML中-缩放图片" class="headerlink" title="31.Don’t Scale Images in HTML　　不要在 HTML中 缩放图片"></a>31.Don’t Scale Images in HTML　　不要在 HTML中 缩放图片</h3><p>　　图片要用多大的就用多大的，1000X1000的图片被width=”100″ height=”100″以后，本身的KB数是不会减少的。</p><h3 id="32-Make-favicon-ico-Small-and-Cacheable-缩小favicon-ico的大小并缓存它"><a href="#32-Make-favicon-ico-Small-and-Cacheable-缩小favicon-ico的大小并缓存它" class="headerlink" title="32.Make favicon. ico Small and Cacheable　　缩小favicon. ico的大小并缓存它"></a>32.Make favicon. ico Small and Cacheable　　缩小favicon. ico的大小并缓存它</h3><p>　　站点的浏览器ICO应该不是经常换吧，那就长时间的缓存它，并且最好控制在1K以下。</p><h3 id="33-Keep-Components-under-25K-保证组件在25K以下"><a href="#33-Keep-Components-under-25K-保证组件在25K以下" class="headerlink" title="33.Keep Components under 25K　　保证组件在25K以下"></a>33.Keep Components under 25K　　保证组件在25K以下</h3><p>　　iPhone不能缓存25K以上的组件，并且这还是要在被压缩前。</p><h3 id="34-Pack-Components-into-a-Multipart-Document-将组件打包进一个多部分的文档中"><a href="#34-Pack-Components-into-a-Multipart-Document-将组件打包进一个多部分的文档中" class="headerlink" title="34.Pack Components into a Multipart Document　将组件打包进一个多部分的文档中"></a>34.Pack Components into a Multipart Document　将组件打包进一个多部分的文档中</h3><p>　　就好像在邮件中加入附件一样，一个HTTP请求就够了，但是这一技术需要确保你的代理支持，iPhone就不支持。</p><h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p>原文地址：<a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">Best Practices for Speeding Up Your Web Site</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Minimize-HTTP-Requests-减少-HTTP-请求&quot;&gt;&lt;a href=&quot;#1-Minimize-HTTP-Requests-减少-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;1.Minimize HTTP Requests　　减少 HTTP 请求&quot;&gt;&lt;/a&gt;1.Minimize HTTP Requests　　减少 HTTP 请求&lt;/h3&gt;&lt;p&gt;　　图片、css、script、flash等等这些都会增加http请求数，减少这些元素的数量就能减少响应时间。把多个JS、CSS在可能的情况下写进一个文件，页面里直接写入图片也是不好的做法，应该写进CSS里，利用 CSS sprites 将小图拼合后利用background来定位。&lt;/p&gt;
&lt;h3 id=&quot;2-Use-a-Content-Delivery-Network-利用-CDN-技术&quot;&gt;&lt;a href=&quot;#2-Use-a-Content-Delivery-Network-利用-CDN-技术&quot; class=&quot;headerlink&quot; title=&quot;2.Use a Content Delivery Network　　利用 CDN 技术&quot;&gt;&lt;/a&gt;2.Use a Content Delivery Network　　利用 CDN 技术&lt;/h3&gt;&lt;h3 id=&quot;3-Add-an-Expires-or-a-Cache-Control-Header-设置头文件过期或者静态缓存&quot;&gt;&lt;a href=&quot;#3-Add-an-Expires-or-a-Cache-Control-Header-设置头文件过期或者静态缓存&quot; class=&quot;headerlink&quot; title=&quot;3.Add an Expires or a Cache-Control Header　　设置头文件过期或者静态缓存&quot;&gt;&lt;/a&gt;3.Add an Expires or a Cache-Control Header　　设置头文件过期或者静态缓存&lt;/h3&gt;&lt;p&gt;　　浏览器会用缓存来减少http请求数来加快页面加载的时间，如果页面头部加一个很长的过期时间，浏览器就会一直缓存页面里的元素。不过这样如果页面里的东西变动的话就要改名字了，否则用户端不会主动刷新，看自己衡量了~ 这项可以通过修改.htaccess文件来实现。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo访问量与访客失效原因</title>
    <link href="http://yoursite.com/2018/10/16/hexo%E8%AE%BF%E9%97%AE%E9%87%8F%E4%B8%8E%E8%AE%BF%E5%AE%A2%E5%A4%B1%E6%95%88%E5%8E%9F%E5%9B%A0/"/>
    <id>http://yoursite.com/2018/10/16/hexo访问量与访客失效原因/</id>
    <published>2018-10-16T08:31:47.000Z</published>
    <updated>2018-10-16T08:52:57.073Z</updated>
    
    <content type="html"><![CDATA[<p>嘻嘻，昨天更新后想看看访问有没有变化的，忽然发现统计功能无效了，之前使用的不蒜子脚本，去看了下原来不蒜子域名修改了。</p><p>不蒜子官网：<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">http://busuanzi.ibruce.info/</a></p><p>解决：将\themes\next\layout_partials\footer.swig下的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嘻嘻，昨天更新后想看看访问有没有变化的，忽然发现统计功能无效了，之前使用的不蒜子脚本，去看了下原来不蒜子域名修改了。&lt;/p&gt;
&lt;p&gt;不蒜子官网：&lt;a href=&quot;http://busuanzi.ibruce.info/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于博客</title>
    <link href="http://yoursite.com/2018/04/28/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/28/关于博客/</id>
    <published>2018-04-28T02:20:25.000Z</published>
    <updated>2018-05-01T01:33:24.240Z</updated>
    
    <content type="html"><![CDATA[<pre><code>考研录取后赋闲在家，闲来无事。</code></pre><p>&emsp;&emsp;在过去一段时间内，我从很多优秀的博客学到了很多，深深感谢那些博主通过博客帮助了很多求学的人。<br>&emsp;&emsp;于是也就有个建立博客的念头，在前几日看到weiyang大佬的搭建博客的文章，便着手搭建这个博客，感谢现在互联网的便利，通过github+hexo，以及众多博主的经验分享，综合选择了NexT主题，终于搭建了这个小窝。希望能督促自己,并分享自己今后的生活与学习，也欢迎各位小伙伴的交流。<br>&emsp;&emsp;在此贴出一些学习的文章，希望想搭建博客的小伙伴可以学习。</p><p>&emsp;&emsp;博文文章：<br>&emsp;&emsp;&emsp;&emsp;<a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://blog.csdn.net/w_ngzeqi/article/details/73863543" target="_blank" rel="noopener">hexo之next主题个性化配置详细教程</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://blog.csdn.net/shengshengshiwo/article/details/79350413" target="_blank" rel="noopener">NexT的主题设定与配置</a><br>&emsp;&emsp;&emsp;&emsp;<a href="http://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://blog.csdn.net/blue_zy/article/details/79058763" target="_blank" rel="noopener">Hexo更换next主题和优化</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有哪些好看的 Hexo 主题？</a></p><p>&emsp;&emsp;后期陆续补充。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;考研录取后赋闲在家，闲来无事。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在过去一段时间内，我从很多优秀的博客学到了很多，深深感谢那些博主通过博客帮助了很多求学的人。&lt;br&gt;&amp;emsp;&amp;emsp;于是也就有个建立博客的念头，在前几日看到wei
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="djwang" scheme="http://yoursite.com/tags/djwang/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博文</title>
    <link href="http://yoursite.com/2018/04/26/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>http://yoursite.com/2018/04/26/第一篇博文/</id>
    <published>2018-04-26T14:54:07.000Z</published>
    <updated>2018-10-17T06:09:09.768Z</updated>
    
    <content type="html"><![CDATA[<!-- 标签别名 --><blockquote class="blockquote-center"><p>小帅哥快来玩呀 <br>本文测试用</p></blockquote><a id="more"></a><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"这里是djwang's blog。"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>\(y = f(x)\)<br>$\int^2_3 x^2 {\rm d}x$<br>$\frac{7x+5}{1+y^2}$<br>$\frac{d}{dx}e^{ax}=ae^{ax}\quad \sum_{i=1}^{n}{(X_i - \overline{X})^2}$<br>$\ln15$  $$\log_2 10$$ <!-- 单$为行内，双$为整行 --><br><a href="https://blog.csdn.net/zdk930519/article/details/54137476" target="_blank" rel="noopener">Markdown中数学公式整理</a></p><h3 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h3><center><br><div style="bottom: 120px; width:310px; heigh:80px;"><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="200" height="86" src="//music.163.com/outchain/player?type=2&id=536622304&auto=1&height=66"></iframe><br></div></center><p><img src="/images/IMG_20170420_164916.jpg" alt="我们毕业了"> </p><!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --><!-- 其中 class="blockquote-center" 是必须的 --><blockquote class="blockquote-center">我们毕业了</blockquote><!-- 标签 方式，要求版本在0.4.5或以上 --><blockquote class="blockquote-center"><p>如有纠正，欢迎指出</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- 标签别名 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;小帅哥快来玩呀 &lt;br&gt;本文测试用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/25/hello-world/"/>
    <id>http://yoursite.com/2018/04/25/hello-world/</id>
    <published>2018-04-25T15:40:54.358Z</published>
    <updated>2018-04-27T02:57:49.904Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
