<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript 匿名函数与闭包</title>
    <url>/2020/03/02/AnonymousFunctionAndClosure/</url>
    <content><![CDATA[<blockquote>
<p>匿名函数为没有函数标识符的函数，主要用于赋值变量；而闭包指有权访问另一个函数作用域中变量的函数，常见方式就是在一个函数内部创建另一个函数。</p>
</blockquote>
<a id="more"></a>
<h2 id="一、匿名函数"><a href="#一、匿名函数" class="headerlink" title="一、匿名函数"></a>一、匿名函数</h2><p>声明一个普通函数,函数名为fun：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么将函数名去掉，就是匿名函数：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单独的匿名函数会报错,无法运行、无法调用</span></span><br><span class="line"><span class="comment">//function() &#123;</span></span><br><span class="line"><span class="comment">//  //函数体</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//未在应用场景中，不符合语法，需加上括号</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在函数后面加上括号，可通过表达式的自我执行，立即执行</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如需传值，可以括号内传值</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;)(“匿名函数”);</span><br></pre></td></tr></table></figure></p>
<p>匿名函数运用场景：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、事件</span></span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var btn=document.getElementById("btn");</span></span><br><span class="line"><span class="regexp">    btn.onclick=function()&#123;</span></span><br><span class="line"><span class="regexp">        alert("点击按钮");</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、对象</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是"</span>+<span class="keyword">this</span>.name+<span class="string">"，今年"</span>+<span class="keyword">this</span>.age+<span class="string">"岁。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.say());<span class="comment">//我是张三，今年18岁。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、函数表达式，用作赋值</span></span><br><span class="line"><span class="keyword">var</span> say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我是张三，今年18岁。"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、回调函数</span></span><br><span class="line">say(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是张三，今年18岁。"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>匿名函数主要用于闭包，以及模拟块级作用域，减少全局变量，执行结束即销毁，而闭包有所不同</p>
<h2 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h2><p>都知道在函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。而闭包所实现的就是从外部读取函数内部的局部变量，其方法就是在函数内部创建另一个函数，而如果这个内部函数被返回，并且在其他地方被调用了，这个内部函数就是闭包，闭包会携带它的函数作用域，可以继续存在于缓存中。闭包可以看做两个函数的桥梁，沟通其局部变量。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过全局变量来累加</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    alert(<span class="string">"a="</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">add();<span class="comment">//a=2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过闭包返回局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(add()());<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaCollection</title>
    <url>/2020/05/29/JavaCollection/</url>
    <content><![CDATA[<h2 id="Java-集合框架图："><a href="#Java-集合框架图：" class="headerlink" title="Java 集合框架图："></a>Java 集合框架图：</h2><a id="more"></a>
<p><img src="/images/202005/JavaCollection.jpg" alt="Java集合框架图"><br>其中红色为接口，蓝色为抽象类，绿色为并发包中的类</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SPA</title>
    <url>/2020/03/08/SPA/</url>
    <content><![CDATA[<h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><p>单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。</p>
<a id="more"></a>
<h3 id="SPA的特点："><a href="#SPA的特点：" class="headerlink" title="SPA的特点："></a>SPA的特点：</h3><ul>
<li>速度：更好的用户体验，让用户在web app感受native app的速度和流畅，</li>
<li>MVVM：经典MVVM开发模式，前后端各负其责。</li>
<li>ajax：重前端，业务逻辑全部在本地操作，数据都需要通过AJAX同步、提交。</li>
<li>路由：在URL中采用#号来作为当前视图的地址,改变#号后的参数，页面并不会重载<h3 id="SPA的两个缺点："><a href="#SPA的两个缺点：" class="headerlink" title="SPA的两个缺点："></a>SPA的两个缺点：</h3></li>
<li>首屏渲染等待时长： 必须得加载完毕，才能渲染出首屏</li>
<li>seo不友好：爬虫只能拿到一个div，认为页面是空的，不利于seo<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3></li>
<li>用循环的视角审视Web应用开发</li>
<li>框定一个一致的SPA图形用户界面（GUI）和模型</li>
<li>将SPA的原则带回服务器端</li>
<li>聚集于对合适的应用进行早期SPA开发 [3]<h3 id="SPA的优缺点"><a href="#SPA的优缺点" class="headerlink" title="SPA的优缺点"></a>SPA的优缺点</h3>单页Web程序的出现是客户端发展的必然结果，但是该技术也是有些局限性，所以采用之前需要了解清楚它的优缺点。</li>
</ul>
<p>1、优点：<br>1). 良好的交互体验<br>用户不需要重新刷新页面，获取数据也是通过Ajax异步获取，页面显示流畅。<br>2). 良好的前后端工作分离模式<br>单页Web应用可以和RESTful规约一起使用，通过REST API提供接口数据，并使用Ajax异步获取，这样有助于分离客户端和服务器端工作。更进一步，可以在客户端也可以分解为静态页面和页面交互两个部分。<br>3). 减轻服务器压力<br>服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；<br>4). 共用一套后端程序代码<br>不用修改后端程序代码就可以同时用于Web界面、手机、平板等多种客户端；</p>
<p>2、缺点：<br>1). SEO难度较高<br>由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，且要用单页应用，那么就做些静态页面给搜索引擎用吧。<br>2). 前进、后退管理<br>由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理，当然此问题也有解决方案，比如利用URI中的散列+iframe实现。<br>3). 初次加载耗时多<br>为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理，如果使用第三方库，建议使用一些大公司的CDN，因此带宽的消耗是必然的。</p>
<p>转自<a href="https://www.jianshu.com/p/dcea4d914b65" target="_blank" rel="noopener">雄霸烽火狼</a></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架</title>
    <url>/2020/03/23/SpringFramework/</url>
    <content><![CDATA[<p>Spring框架可在任何类型的部署平台上为基于Java的现代企业应用程序提供全面的编程和配置模型<br><a id="more"></a></p>
<h3 id="Spring六大特征："><a href="#Spring六大特征：" class="headerlink" title="Spring六大特征："></a>Spring六大特征：</h3><ul>
<li>核心技术：依赖注入，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP（面向切面编程）；</li>
<li>测试：模拟对象，TestContext框架，Spring MVC测试，WebTestClient；</li>
<li>数据访问：事务，DAO支持，JDBC，ORM（对象关系映射），组件XML；</li>
<li>Web支持：Spring MVC和Spring WebFlux Web框架；</li>
<li>集成：远程处理，JMS，JCA，JMX，电子邮件，任务，调度，缓存；</li>
<li>语言：Kotlin（JetBrains开发），Groovy，动态语言；</li>
</ul>
<h3 id="Spring-重要模块"><a href="#Spring-重要模块" class="headerlink" title="Spring 重要模块"></a>Spring 重要模块</h3><p><img src="/images/202005/SpringFrameworkRuntime.png" alt="Spring 4.x"></p>
<ul>
<li>Spring Core： 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IoC 依赖注入功能。</li>
<li>Spring Aspects ： 该模块为与AspectJ的集成提供支持。</li>
<li>Spring AOP ：提供了面向切面的编程实现。</li>
<li>Spring JDBC : Java数据库连接。</li>
<li>Spring JMS ：Java消息服务。</li>
<li>Spring ORM : 用于支持Hibernate等ORM工具。</li>
<li>Spring Web : 为创建Web应用程序提供支持。</li>
<li>Spring Test : 提供了对 JUnit 和 TestNG 测试的支持。</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>AngularJS中Directive指令bindToController属性</title>
    <url>/2020/04/05/angularjsbindtocontroller/</url>
    <content><![CDATA[<!-- 标签别名 -->
<blockquote class="blockquote-center"><p>&amp;、=、@</p>
</blockquote>
<a id="more"></a>
<h2 id="1、-amp"><a href="#1、-amp" class="headerlink" title="1、&amp;"></a>1、&amp;</h2><p>绑定function<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">metadataManagement</span>(<span class="params">PathUtils</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        restrict: <span class="string">'E'</span>,</span><br><span class="line">        bindToController: &#123;</span><br><span class="line">            title:<span class="string">"@"</span>,</span><br><span class="line">            values: <span class="string">"="</span>, <span class="comment">//所有的元数据</span></span><br><span class="line">            deleteFunc: <span class="string">"&amp;"</span>, <span class="comment">//删除触发的方法，需要接收object对象与callback</span></span><br><span class="line">            enableFunc: <span class="string">"&amp;?"</span> <span class="comment">//?为可双向绑定，可传可不传</span></span><br><span class="line">        &#125;,</span><br><span class="line">        controller: [MetadataManagementDir],</span><br><span class="line">        controllerAs: <span class="string">'metadataManagementDir'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delet</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    vm.values[index].inuse = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (vm.deleteFunc != <span class="literal">null</span>) &#123;</span><br><span class="line">        vm.deleteFunc(&#123;</span><br><span class="line">            obj: vm.values[index],</span><br><span class="line">            callback: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enable</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    vm.values[index].inuse = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (vm.enableFunc != <span class="literal">null</span>) &#123;</span><br><span class="line">        vm.enableFunc(&#123;</span><br><span class="line">            obj: vm.values[index],</span><br><span class="line">            callback: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传值：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">metadata-management</span></span></span><br><span class="line"><span class="tag">	<span class="attr">delete-func</span>=<span class="string">"cultivationProcedureCategoryCtrl.deleteFunc(obj,callback)"</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">enable-func</span>=<span class="string">"cultivationProcedureCategoryCtrl.enableFunc(obj,callback)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">metadata-management</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteFunc</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">    ecnuCultivationProcedureCategoryDao.disableById(obj.id, callback);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableFunc</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">    ecnuCultivationProcedureCategoryDao.enableById(obj.id, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、"><a href="#2、" class="headerlink" title="2、="></a>2、=</h2><p>双向绑定数据<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">metadata-management</span> <span class="attr">values</span>=<span class="string">"cultivationProcedureCategoryCtrl.values"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">metadata-management</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3、"><a href="#3、" class="headerlink" title="3、@"></a>3、@</h2><p>仅单向绑定，不同于=传递值，只传递字符<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">metadata-management</span> <span class="attr">title</span>=<span class="string">"元数据管理"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">metadata-management</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>java比较传统方式和数据库连接池方式的性能差异</title>
    <url>/2020/06/03/dbConnectionpoolvs/</url>
    <content><![CDATA[<p>向数据库中插入100条数据，比较传统方式和数据库连接池方式的性能差异<br><a id="more"></a></p>
<p>注：只是一个简单比较实验，未考虑其他影响<br>代码实现如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConnectionPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;<span class="comment">//传统方式100个线程每个都创建新的连接</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">                    Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">							<span class="comment">//try-with-resource</span></span><br><span class="line">                            <span class="keyword">try</span> (Connection c = DriverManager</span><br><span class="line">                                    .getConnection(<span class="string">"jdbc:mysql://58.198.176.191:3306/yjsy_copy?characterEncoding=UTF-8"</span>,</span><br><span class="line">                                            <span class="string">"yjsy_nginx"</span>, <span class="string">"root"</span>);</span><br><span class="line">                                 Statement st = c.createStatement();</span><br><span class="line">                            ) &#123;</span><br><span class="line">                                    String sql = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line">                                    st.execute(sql);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    t.start();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        t.join();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">                System.out.println(<span class="string">"使用100个线程均重新连接数据库的传统方式"</span>);</span><br><span class="line">                System.out.println(<span class="string">"插入100条数据所需要的时间为:"</span> + (t2 - t1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread() &#123; <span class="comment">//使用数据库连接池创建100个对象</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">                ConnectionPool cp = <span class="keyword">new</span> ConnectionPool(<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    Thread t = <span class="keyword">new</span> WorkingThread(cp);</span><br><span class="line">                    t.start();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        t.join();<span class="comment">// 主线程需要等待子线程执行完成之后再结束</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">                System.out.println(<span class="string">"使用100个线程通过数据库连接池进行连接的方式"</span>);</span><br><span class="line">                System.out.println(<span class="string">"插入100条数据所需要的时间为:"</span> + (t2 - t1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkingThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    ConnectionPool cp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkingThread</span><span class="params">( ConnectionPool cp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cp = cp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection c = cp.getConnection();</span><br><span class="line">        <span class="keyword">try</span>(Statement st = c.createStatement();) &#123;</span><br><span class="line">            String sql = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line">            st.execute(sql);</span><br><span class="line">            <span class="comment">//System.out.println("一条数据通过数据库连接池方式被插入");</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        cp.returnConnection(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据库连接池类：ConnectionPool</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Connection&gt; cs = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里恰恰不能使用try-with-resource的方式，因为这些连接都需要是"活"的，不要被自动关闭了</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                Connection c = DriverManager</span><br><span class="line">                        .getConnection(<span class="string">"jdbc:mysql://58.198.176.191:3306/yjsy_copy?characterEncoding=UTF-8"</span>, <span class="string">"yjsy_nginx"</span>, <span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">                cs.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (cs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Connection c = cs.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnConnection</span><span class="params">(Connection c)</span> </span>&#123;</span><br><span class="line">        cs.add(c);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong> ：<img src="/images/202006/connectionpoolresult.png" alt="connectionpoolvs"><br>比较可以看出使用数据库连接池会比传统的连接数据库的方式在该场景下会快50%以上，可以重复使用数据库的连接资源，比传统每次连接需要创建关闭，要节约很多的时间</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>数据库连接</tag>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/04/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo访问量与访客失效原因</title>
    <url>/2018/10/16/hexo%E8%AE%BF%E9%97%AE%E9%87%8F%E4%B8%8E%E8%AE%BF%E5%AE%A2%E5%A4%B1%E6%95%88%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>嘻嘻，昨天更新后想看看访问有没有变化的，忽然发现统计功能无效了，之前使用的不蒜子脚本，去看了下原来不蒜子域名修改了。</p>
<p>不蒜子官网：<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">http://busuanzi.ibruce.info/</a></p>
<p>解决：将\themes\next\layout_partials\footer.swig下的<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode101. 对称二叉树</title>
    <url>/2020/05/31/leetcode101/</url>
    <content><![CDATA[<p>给定一个二叉树，检查它是否是镜像对称的。<br><a id="more"></a><br>例如，二叉树 [1,2,2,3,4,4,3] 是对称的,[1,2,2,null,3,null,3] 则不是镜像对称的,<br><strong>分析</strong>：要判断二叉树是否镜像，首先要判断根结点的左右子树值是否相等，然后判断左子树左节点和右子树右节点的值，和左子树的右节点和右子树左节点的值得是否相等。可以分解为两个树的是否镜像<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mirror(root,root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">mirror</span><span class="params">(TreeNode n1,TreeNode n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n1==<span class="keyword">null</span>&amp;&amp; n2==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(n1==<span class="keyword">null</span> || n2==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> n1.val==n2.val &amp;&amp; mirror(n1.left,n2.right) &amp;&amp;mirror(n1.right,n2.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>震惊，该物质不溶于自身！LeetCode238、除自身以外数组的乘积</title>
    <url>/2020/06/04/leetcode238/</url>
    <content><![CDATA[<p>给你一个长度为 n 的整数数组 nums，其中 n &gt; 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。<br><a id="more"></a><br><strong>示例</strong>：</p>
<blockquote>
<p>输入：[1,2,3,4]<br>输出：[24,12,8,6]</p>
</blockquote>
<p><strong>分析</strong>：用两个数组分别储存除自身以外的左右之积，最后相乘返回<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">	<span class="comment">//左右累乘</span></span><br><span class="line">	<span class="keyword">int</span> len=nums.length;</span><br><span class="line">	<span class="keyword">int</span>[] left=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">	<span class="comment">//int[] right=new int[len];</span></span><br><span class="line">	<span class="keyword">int</span> right=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		left[i]=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//right[i]=1;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">		left[i]=left[i-<span class="number">1</span>] * nums[i-<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=len-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="comment">//对right数组优化下</span></span><br><span class="line">		<span class="comment">//right[i]=right[i+1] * nums[i+1];</span></span><br><span class="line">		right=right * nums[i+<span class="number">1</span>];</span><br><span class="line">		left[i]=left[i]*right;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么他能靠21点成为亿万富翁？LeetCode837、新21点</title>
    <url>/2020/06/03/leetcode837/</url>
    <content><![CDATA[<p>爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：<br>爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。<br>问：当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？<br><a id="more"></a><br><strong>示例1</strong>：</p>
<blockquote>
<p>输入：N = 10, K = 1, W = 10<br>输出：1.00000<br>说明：爱丽丝得到一张卡，然后停止。</p>
</blockquote>
<p><strong>示例2</strong>：</p>
<blockquote>
<p>输入：N = 6, K = 1, W = 10<br>输出：0.60000<br>说明：爱丽丝得到一张卡，然后停止。<br>在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。</p>
</blockquote>
<p><strong>分析</strong>：<br>总之，就是边缘试探，求将超未超的概率。<br>用动态规划，由已知条件得到未知的情况。<br>令dp[x]表示得分x的情况下，开始游戏并获胜的概率，这样d[0]就是结果所得。已知可以得到，当K&lt;=x&lt;=min(N,K+W-1)时已成胜局，故dp[x]=1,(K+W不能被满足)，而x&gt;=min(N,K+W+1)时dp[x]=0;<br>当0&lt;=x&lt;K时，可以知道 W*dp[x]=dp[x+1]+dp[x+2]+…+dp[x+W],即dp[x]的获胜概率，可由下一个状态的概率和得到。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">new21Game</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> K, <span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">double</span>[] dp = <span class="keyword">new</span> <span class="keyword">double</span>[K + W];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = K; i &lt;= N &amp;&amp; i &lt; K + W; i++) &#123;</span><br><span class="line">		dp[i] = <span class="number">1.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = K - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= W; j++) &#123;</span><br><span class="line">			dp[i] += dp[i + j] / W;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上解法复杂度为O(N+KW]，超时了。可以优化0-K间x的取值方式，以邻项计算，dp[x]-dp[x+1]=(dp[x+1]-dp[x+W+1])/W，其中0&lt;=x&lt;K-1，x=K-1时不满足，dp[K-1]可由前面的方法得到dp[K]开始值为1，dp[K-1]=(min(N,K+W-1)-K+1)/W。这样时间复杂度为O(min(N,K+W))。<br>代码如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">new21Game</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> K, <span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">double</span>[] dp = <span class="keyword">new</span> <span class="keyword">double</span>[K + W];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = K; i &lt;= N &amp;&amp; i &lt; K + W; i++) &#123;</span><br><span class="line">		dp[i] = <span class="number">1.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dp[K - <span class="number">1</span>] = <span class="number">1.0</span> * Math.min(N - K + <span class="number">1</span>, W) / W;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = K - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		dp[i] = dp[i + <span class="number">1</span>] + (dp[i + <span class="number">1</span>] - dp[i + W + <span class="number">1</span>]) / W;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>继续分析开始的解时，可以知道是以定长的窗口，来得到0&lt;=x&lt;K时dp的值，那么也可以以一个sum来计算dp[x+1]+dp[x+2]+…+dp[x+W]，每次左移时，加上dp[x]，而减去dp[X+W]，这样以 dp[x]=sum/W 的公式，也可以有上面优化解法的时间复杂度。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">new21Game</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> K, <span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">double</span>[] dp = <span class="keyword">new</span> <span class="keyword">double</span>[K + W];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = K; i &lt;= N &amp;&amp; i &lt; K + W; i++) &#123;</span><br><span class="line">		dp[i] = <span class="number">1.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">double</span> sum=Math.min(N,K+W-<span class="number">1</span>)-K+<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = K - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		dp[i] = sum / W;</span><br><span class="line">		sum = sum-dp[i+W]+dp[i];	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 84、柱状图中最大的矩形</title>
    <url>/2020/05/30/leetcode84/</url>
    <content><![CDATA[<p><strong>描述</strong>：给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。<br>求在该柱状图中，能够勾勒出来的矩形的最大面积。<br><a id="more"></a><br><img src="/images/202005/leetcode84.png" alt="LeetCode84"><br>图中最大矩形面积，为高度5和6两根柱子所构成的，其面积为 10 个单位。</p>
<p>题解：<br>1、用暴力法，取每根柱子向两边延展所能得到的最大面积，最后比较各面积大小，时间复杂度为O(n^2),空间复杂度O(1).<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//计算每个柱子所能勾勒的最大面积</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">            res = Math.max(res, countPerArea(heights, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPerArea</span><span class="params">(<span class="keyword">int</span>[] heights, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = index, right = index;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; heights[left] &gt;= heights[index]) &#123;</span><br><span class="line">            left--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; heights.length &amp;&amp; heights[right] &gt;= heights[index]) &#123;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (right - left - <span class="number">1</span>) * heights[index];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>2、看的题解，使用单调栈，以高度单调递增的柱子入栈，当遇到更低的柱子，则出栈，向前维护高柱子所得到的面积。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len=heights.length;</span><br><span class="line">	<span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(len==<span class="number">1</span>) <span class="keyword">return</span> heights[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span>[] newHeights=<span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">2</span>];</span><br><span class="line">	<span class="comment">//为了避免剩余栈中元素，前后加0高度的哨兵</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">		newHeights[i]=heights[i-<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	len+=<span class="number">2</span>;</span><br><span class="line">	heights=newHeights;</span><br><span class="line">	Deque&lt;Integer&gt; stack=<span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">	stack.addLast(<span class="number">0</span>);</span><br><span class="line">	stack.offerLast(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span> (heights[stack.peekLast()]&gt;heights[i])&#123;</span><br><span class="line">			<span class="comment">//[0,2,1,5,6,2,3,0]为例，当i为5时，此时为2，栈顶6大于2</span></span><br><span class="line">			<span class="comment">//那么出栈6，此时高度为6，宽度为1;</span></span><br><span class="line">			<span class="comment">//后续栈顶5依旧大于2，出栈处理高度5的柱子</span></span><br><span class="line">			<span class="keyword">int</span> height =heights[stack.pollLast()];</span><br><span class="line">			<span class="keyword">int</span> width=i-stack.peekLast()-<span class="number">1</span>;</span><br><span class="line">			res=Math.max(res,width*height);</span><br><span class="line">		&#125;</span><br><span class="line">		stack.offerLast(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>代理</title>
    <url>/2020/04/17/proxy/</url>
    <content><![CDATA[<p>Java中代理是复用代码的除组合和继承外的第三种方法，并没有提供直接支持，是继承和组合的中庸。相比组合和继承，可以隐藏父类在子类的方法暴露。<br><a id="more"></a><br>比如Car类，继承CarCore类，来实现汽车的前后移动，<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">int</span> velocity)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> velocity)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Car使用继承实现CarCore</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">CarCore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String name)</span></span>&#123; <span class="keyword">this</span>.name=name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car=<span class="keyword">new</span> Car(<span class="string">"BMW"</span>);</span><br><span class="line">        car.forward(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用代理可以很好解决由此的问题：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> CarCore carCore=<span class="keyword">new</span> CarCore();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarProxy</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name=name;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//proxy methods</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">int</span> velocity)</span></span>&#123;</span><br><span class="line">        carCore.forward(velocity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> velocity)</span></span>&#123;</span><br><span class="line">        carCore.back(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarProxy carProxy=<span class="keyword">new</span> CarProxy(<span class="string">"BMW"</span>);</span><br><span class="line">        carProxy.forward(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由上通过通过代理者获得了与继承相同的接口，但是用代理可以得到更多的控制力。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和</title>
    <url>/2020/05/27/qianzhuihe/</url>
    <content><![CDATA[<p>前缀和是oj里常用的一种预处理，主要用于处理类似区间和相关的题。能大大减少查询的时间复杂读。<br><a id="more"></a><br>如，求数组A的最长连续子序列和，用S数组表示数组前缀和，即S[n]=$\sum_{i=0}^n$ A[i],,那么子序列和sum[l,r]=$\sum_{i=l}^r$ A[i]=S[r]-s[l-1].<br>这是一维的前缀和，同样可以拓展到二维运用。<br>该类题目有：<a href="https://leetcode-cn.com/problems/count-number-of-nice-subarrays/" target="_blank" rel="noopener">1248.统计「优美子数组」</a><br><a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/" target="_blank" rel="noopener">974. 和可被 K 整除的子数组</a><br>以974题为例，讲述其代码原理：</p>
<p><strong>题目描述</strong><br>给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目<br>示例：</p>
<blockquote>
<p><strong>输入</strong> ：A = [4,5,0,-2,-3,1], K = 5<br><strong>输出</strong> ：7<br><strong>解释</strong> ：有 7 个子数组满足其元素之和可被 K = 5 整除: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</p>
</blockquote>
<p>以下为题解：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraysDivByK</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line"><span class="comment">//利用前缀和的差，可以得到某段数组和是否可被整除</span></span><br><span class="line">    <span class="comment">//比如s[i+j]-s[i],可得A[i：j+1]的和</span></span><br><span class="line">    <span class="comment">//又(s[i+j]-s[i])%k==0，可化为s[i+j]%k==s[i]%k==0</span></span><br><span class="line">	<span class="comment">//所以只要用record数组统计和的求模结果，就可以组合得出结果，比如求模为1的有2个，则是C22=1</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[A.length+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>[] record =<span class="keyword">new</span> <span class="keyword">int</span>[K];</span><br><span class="line">    sum[<span class="number">0</span>]=A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">		sum[i]=sum[i-<span class="number">1</span>]+A[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=A.length;i++)&#123;</span><br><span class="line">		<span class="comment">//Java对负数取模为负数</span></span><br><span class="line">        record[((sum[i] % K)+K)%K]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">        res += record[i] * (record[i] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>oj</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet开发（一）</title>
    <url>/2020/05/31/servlet1/</url>
    <content><![CDATA[<p>开发Servlet分三步：</p>
<ul>
<li>创建Web应用项目</li>
<li>编写servlet代码</li>
<li>部署到tomcat中</li>
</ul>
<a id="more"></a>
<h2 id="1、搭建tomcat"><a href="#1、搭建tomcat" class="headerlink" title="1、搭建tomcat"></a>1、搭建tomcat</h2><p>Tomcat是常见的免费的web服务器. 下载安装使用即可，成功后进入tomcat目录，/tomcat/bin/startup.bat，其中启动是startup.bat，关闭时shutdown.bat，linux环境下为同名的.sh文件，将一个html文件，如login.html，放置于/tomcat/webapps/ROOT文件下，启动tomcat，既可以成功用浏览器访问localhost:8080/login.html。<br>这样就成功搭建了一个简单web服务器啦~<br>你可以对此做简单的修改，比如修改端口<br>tomcat的相关配置信息在/tomcat/conf/server.xml中。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>找到如上的代码，将8080修改为80即可，由于80是web服务器默认的端口号，所以你平时访问网站，没有看到端口号，就是因为在80中，或者是访问80，反向代理到其他位置。</p>
<h2 id="2、创建Web应用项目"><a href="#2、创建Web应用项目" class="headerlink" title="2、创建Web应用项目"></a>2、创建Web应用项目</h2><p>创建简单的java project项目即可。<br>下面直接贴项目文件和代码<br><img src="/images/202005/myservlet.png" alt="Myservlet"><br>其中j2ee为项目名，src下分别建了HelloServlet类和LoginServlet类，都继承HttpServlet类，分别实现doGet()和doPost()来处理请求和响应，servlet-api.jar为开发Servlet相关的包，在\tomcat\lib\servlet-api.jar。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.getWriter().println(<span class="string">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span>);</span><br><span class="line">            response.getWriter().println(<span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  </span><br><span class="line">    	<span class="comment">//设置字符编码,获取中文参数</span></span><br><span class="line">    	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    	</span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//或者解码再编码得到中文,建议使用上者</span></span><br><span class="line">        <span class="comment">// byte[] bytes = name.getBytes("ISO-8859-1");</span></span><br><span class="line">        <span class="comment">// name = new String(bytes, "UTF-8");</span></span><br><span class="line">        System.out.println(<span class="string">"name:"</span> + name);</span><br><span class="line">        </span><br><span class="line">        String html = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))</span><br><span class="line">            html = <span class="string">"&lt;div style='color:green'&gt;success&lt;/div&gt;"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            html = <span class="string">"&lt;div style='color:red'&gt;fail&lt;/div&gt;"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回中文,对response设置</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line">        pw.println(html);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web.xml提供路径与servlet的映射关系，如把/hello这个路径，映射到 HelloServlet这个类上<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>login.html为前端的登陆页。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>还要在WEB-INF下创建classes目录，用于把项目的class文件输出到该文件下，使得tomcat可以在WEB-INF下被找到.<br><strong>步骤</strong>：项目右键-&gt;properties-&gt;Java Build Path-&gt;Source-&gt;右下角的Brower-&gt; 指定位置是j2ee/web/WEB-INF/classes。</p>
<p>最后配置tomcat的server.xml 中的&lt;context&gt;&gt;<br>在&lt;Host name=”localhost” …&gt;下面加一句:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"你的项目文件名\\j2ee\\web"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">reloadable</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样就可以通过 <a href="http://127.0.0.1/hello" target="_blank" rel="noopener">http://127.0.0.1/hello</a> 访问到hello.html了,并实现简单的登陆功能<br><img src="/images/202005/loginhtml.png" alt="LoginHtml"><br>由于上面已将项目部署的path修改到了新的目录，所以tomcat下的ROOT需要删除，防止冲突，不过也可以将项目打包至ROOT目录下，这里没用这个</p>
<h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>1、tomcat运行，启动/tomcat/bin/startup.bat，但有错见图1，需在/tomcat/bin/setclasspath.bat配置JAVA_HOME和JRE_HOME，切记：赋值中间不能有空格，配置见图2<br><img src="/images/202005/tomcaterror1.png" alt="启动Tomcat报错"><br><img src="/images/202005/tomcatset.png" alt="Tomcat配置"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet开发（二）</title>
    <url>/2020/05/31/servlet2/</url>
    <content><![CDATA[<h2 id="HttpServlet类"><a href="#HttpServlet类" class="headerlink" title="HttpServlet类"></a>HttpServlet类</h2><p>HttpServlet继承抽象类GenericServlet，GenericServlet类实现了Servlet, ServletConfig接口。</p>
<a id="more"></a>  
<p>HttpServlet类：<br><img src="/images/202005/HttpServlet.png" alt="HttpServlet类"><br>GenericServlet类：<br><img src="/images/202005/GenericServlet.png" alt="GenericServlet类"></p>
<p>Servlet 需要提供对应的doGet()与doPost()方法<br>在执行doGet()或者doPost()之前，都会先执行service()，根据请求提交方式来判断使用调用doGet()还是doPost()，因此也可以复写service()方法，提供相应服务。</p>
<h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p>一个Servlet的生命周期由实例化，初始化，提供服务，销毁，被回收几个步骤组成<br><strong>实例化</strong>：<br>当用户通过浏览器输入一个路径，这个路径对应的servlet被调用的时候，该Servlet就会被实例化<br>为LoginServlet显式提供一个构造方法 LoginServlet()<br>而无论访问了多少次LoginServlet，LoginServlet构造方法只会执行一次，所以Servlet是单实例的<br><strong>初始化</strong>：<br>LoginServlet 继承了HttpServlet，同时也继承了init(ServletConfig) 方法<br>init 方法是一个实例方法，所以会在构造方法执行后执行。<br>无论访问了多少次LoginSerlvet<br>init初始化 只会执行一次<br><strong>提供服务</strong>：<br>接下来就是执行service()方法，然后通过浏览器传递过来的信息进行判断，是调用doGet()还是doPost()方法<br>service()中也可以编写业务代码，比如判断用户输入的账号和密码是否正确<br><strong>销毁</strong>：<br>销毁为destroy()<br>在如下几种情况下，会调用destroy()<br>1、 该Servlet所在的web应用重新启动，在server.xml中配置该web应用的时候用到了<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"e:\\project\\j2ee\\web"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">reloadable</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果把 reloadable=”false” 改为reloadable=”true” 就表示有任何类发生的更新，web应用会自动重启<br>当web应用自动重启的时候，destroy()方法就会被调用<br>2、关闭tomcat的时候 destroy()方法会被调用<br><strong>回收</strong>：<br>当该Servlet被销毁后，就满足垃圾回收的条件了。当下一次GC时，就有可能被回收。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet开发（三）</title>
    <url>/2020/05/31/servlet3/</url>
    <content><![CDATA[<h2 id="Servlet跳转"><a href="#Servlet跳转" class="headerlink" title="Servlet跳转"></a>Servlet跳转</h2><ul>
<li>服务端跳转</li>
<li>客户端跳转</li>
</ul>
<a id="more"></a>
<p>设计登陆成功和失败的两个页面success.html、fail.html。</p>
<h3 id="服务端跳转"><a href="#服务端跳转" class="headerlink" title="服务端跳转"></a>服务端跳转</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</span><br></pre></td></tr></table></figure>
<h3 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"fail.html"</span>);</span><br></pre></td></tr></table></figure>
<p>修改后的LoginServlet类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))</span><br><span class="line">			request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        	response.sendRedirect(<span class="string">"fail.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：服务端跳转地址会由 <a href="http://127.0.0.1/login.html" target="_blank" rel="noopener">http://127.0.0.1/login.html</a> 改变为 <a href="http://127.0.0.1/login" target="_blank" rel="noopener">http://127.0.0.1/login</a> ，而客户端跳转会改变地址<a href="http://127.0.0.1/fail.html" target="_blank" rel="noopener">http://127.0.0.1/fail.html</a> ，这是因为服务端跳转还是在web.xml配置的/login映射的LoginServlet中，是在服务器内部访问success.html，而客户端跳转是发送跳转信息给浏览器，使得浏览器访问新的页面。</p>
<h2 id="配置Servlet自启动"><a href="#配置Servlet自启动" class="headerlink" title="配置Servlet自启动"></a>配置Servlet自启动</h2><p>在项目的web.xml中，配置HelloServlet的地方，配置如下属性：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>10<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>取值为1-99，表示启动顺序，这样启动tomcat时就会启动该Servlet，可以复写init(ServletConfig)方法验证<br>而windows下开机自启动tomcat，需要配置电脑环境系统变量，新建变量名CATALINA_HOME，值为tomcat位置，我的是F:\eclipse\tomcat，然后在path下添加%CATALINA_HOME%\bin\;，最后进入到tomcat\bin下运行service.bat install，安装tomcat服务，然后就可以在计算机服务中设置自启动了</p>
<h2 id="Servlet-request和response常见方法"><a href="#Servlet-request和response常见方法" class="headerlink" title="Servlet request和response常见方法"></a>Servlet request和response常见方法</h2><p><strong>request常见方法</strong>：<br>request.getParameter(): 是常见的方法，用于获取单值的参数<br>request的setAttribute()和getAttribute()可以用来在进行服务端跳转的时候，在不同的Servlet之间进行数据共享<br><strong>response常见方法</strong>：<br>前文用到response.getWriter()来返回给浏览器html的内容<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter pw= response.getWriter();</span><br></pre></td></tr></table></figure></p>
<p>setContentType可以设置响应格式，text/html为html格式，而其他格式会被识别为文件下载<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="Servlet上传文件"><a href="#Servlet上传文件" class="headerlink" title="Servlet上传文件"></a>Servlet上传文件</h2><h3 id="创建upload-html文件"><a href="#创建upload-html文件" class="headerlink" title="创建upload.html文件"></a>创建upload.html文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"uploadPhoto"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  英雄名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"heroName"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  上传头像 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filepath"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&lt;form&gt;的method必须是post的，get不能上传文件, 还需要加上enctype=”multipart/form-data” 表示提交的数据是二进制文件.</p>
<h3 id="创建UploadPhotoServlet类"><a href="#创建UploadPhotoServlet类" class="headerlink" title="创建UploadPhotoServlet类"></a>创建UploadPhotoServlet类</h3><p>在UploadPhotoServlet中进行上传的功能开发。<br>注：需要用到两个第三方的jar包，<a href="http://archive.apache.org/dist/commons/io/" target="_blank" rel="noopener">commons-io-2.5.jar</a> 和<a href="http://archive.apache.org/dist/commons/fileupload/" target="_blank" rel="noopener">commons-fileupload-1.3.3.jar</a>,存放在WEB-INF/lib下，并导入到项目中：右键 project-&gt;properties-&gt;java build path-&gt;libaries-&gt;add external jars</p>
<p>UploadPhotoServlet类：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadPhotoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        String filename = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">            ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">            <span class="comment">// 设置上传文件的大小限制为1M</span></span><br><span class="line">            factory.setSizeThreshold(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">             </span><br><span class="line">            List items = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                items = upload.parseRequest(request);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            Iterator iter = items.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                FileItem item = (FileItem) iter.next();</span><br><span class="line">                <span class="comment">//用来处理是常规字段还是提交的文件</span></span><br><span class="line">                <span class="keyword">if</span> (!item.isFormField()) &#123;</span><br><span class="line">  </span><br><span class="line">                    <span class="comment">// 根据时间戳创建头像文件</span></span><br><span class="line">                    filename = System.currentTimeMillis() + <span class="string">".jpg"</span>;</span><br><span class="line">                     </span><br><span class="line">                    <span class="comment">//通过getRealPath获取上传文件夹，如果项目在F:\Java\workspace\j2ee\web,那么就会自动获取到 F:\Java\workspace\j2ee\web\uploaded</span></span><br><span class="line">                    String photoFolder =request.getServletContext().getRealPath(<span class="string">"uploaded"</span>);</span><br><span class="line">                     </span><br><span class="line">                    File f = <span class="keyword">new</span> File(photoFolder, filename);</span><br><span class="line">                    f.getParentFile().mkdirs();</span><br><span class="line">  </span><br><span class="line">                    <span class="comment">// 通过item.getInputStream()获取浏览器上传的文件的输入流</span></span><br><span class="line">                    InputStream is = item.getInputStream();</span><br><span class="line">  </span><br><span class="line">                    <span class="comment">// 复制文件</span></span><br><span class="line">                    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">                    <span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">                    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (-<span class="number">1</span> != (length = is.read(b))) &#123;</span><br><span class="line">                        fos.write(b, <span class="number">0</span>, length);</span><br><span class="line">                    &#125;</span><br><span class="line">                    fos.close();</span><br><span class="line">  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(item.getFieldName());</span><br><span class="line">                    String value = item.getString();</span><br><span class="line">                    value = <span class="keyword">new</span> String(value.getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">                    System.out.println(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            String html = <span class="string">"&lt;img width='200' height='150' src='uploaded/%s' /&gt;"</span>;</span><br><span class="line">            response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">            PrintWriter pw= response.getWriter();</span><br><span class="line">             </span><br><span class="line">            pw.format(html, filename);</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在web.xml中配置映射:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadPhotoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>UploadPhotoServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadPhotoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/uploadPhoto<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>vivo 2020届校招在线编程笔试B卷</title>
    <url>/2020/05/29/vivo2020B/</url>
    <content><![CDATA[<p>牛客vivo2020校招编程题解<br><a id="more"></a></p>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>今年7月份vivo迎来了新入职的大学生，现在需要为每个新同事分配一个工号。人力资源部同事小v设计了一个方法为每个人进行排序并分配最终的工号，具体规则是：</p>
<blockquote>
<p>将N（N&lt;10000）个人排成一排，从第1个人开始报数；如果报数是M的倍数就出列，报到队尾后则回到队头继续报，直到所有人都出列；</p>
</blockquote>
<p>最后按照出列顺序为每个人依次分配工号。请你使用自己擅长的编程语言帮助小v实现此方法。<br>解法：使用循环单链表，依次出队<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	ListNode next;</span><br><span class="line">	ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] input)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// TODO Write your code here</span></span><br><span class="line">	<span class="keyword">int</span> n=input[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> m=input[<span class="number">1</span>];</span><br><span class="line">	ListNode people=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">	ListNode p = people;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		ListNode node=<span class="keyword">new</span> ListNode(i);</span><br><span class="line">		p.next=node;</span><br><span class="line">		p=p.next;</span><br><span class="line">	&#125;</span><br><span class="line">	p.next=people;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> out=n;</span><br><span class="line">	StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">	p=people;</span><br><span class="line">	<span class="keyword">while</span>(out&gt;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">			p=p.next;</span><br><span class="line">		&#125;</span><br><span class="line">		sb.append(p.val);</span><br><span class="line">		sb.append(<span class="string">" "</span>);</span><br><span class="line">		p.val=p.next.val;</span><br><span class="line">		p.next=p.next.next;</span><br><span class="line">		out--;</span><br><span class="line">	&#125;</span><br><span class="line">	sb.append(p.val);</span><br><span class="line">	<span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>小v在公司负责游戏运营，今天收到一款申请新上架的游戏“跳一跳”，为了确保提供给广大玩家朋友们的游戏都是高品质的，按照运营流程小v必须对新游戏进行全方位了解体验和评估。这款游戏的规则如下：</p>
<blockquote>
<p>有n个盒子排成了一行，每个盒子上面有一个数字a[i]，表示在该盒子上的人最多能向右移动a[i]个盒子（比如当前所在盒子上的数字是3，则表示可以一次向右前进1个盒子，2个盒子或者3个盒子）。</p>
</blockquote>
<p>现在小v从左边第一个盒子上开始体验游戏，请问最少需要移动几次能到最后一个盒子上？<br>分析：最远跳跃，依次保留每次跳跃中的可以跳跃到下一次的最远距离<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] input)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Write your code here</span></span><br><span class="line">	<span class="keyword">if</span>(input == <span class="keyword">null</span>||input.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len=input.length;</span><br><span class="line">	<span class="keyword">int</span> step=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> end=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> maxReach=input[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(maxReach &lt; i) <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//如果不能到达最后，则返回-1</span></span><br><span class="line">		<span class="comment">//记录各节点所能到达的最远距离</span></span><br><span class="line">		maxReach=Math.max(maxReach,i+input[i]); </span><br><span class="line">		<span class="keyword">if</span>(maxReach &gt;= len-<span class="number">1</span>) <span class="keyword">return</span> (step+<span class="number">1</span>);<span class="comment">//超出则直接返回</span></span><br><span class="line">		<span class="keyword">if</span>(i==end)&#123;</span><br><span class="line">			end = maxReach;</span><br><span class="line">			step++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> step;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>小v最近在玩一款挖矿的游戏，该游戏介绍如下：</p>
<blockquote>
<p>1、每次可以挖到多个矿石，每个矿石的重量都不一样，挖矿结束后需要通过一款平衡矿车运送下山；<br>2、平衡矿车有左右2个车厢，中间只有1个车轮沿着导轨滑到山下，且矿车只有在2个车厢重量完全相等且矿石数量相差不超过1个的情况下才能成功运送矿石，否则在转弯时可能出现侧翻。</p>
</blockquote>
<p>假设小v挖到了n（n&lt;100）个矿石，每个矿石重量不超过100，为了确保一次性将n个矿石都运送出去，一旦矿车的车厢重量不一样就需要购买配重砝码。请问小v每次最少需要购买多少重量的砝码呢? （假设车厢足够放下这些矿石和砝码，砝码重量任选）<br>分析：开始用得贪心，不能ac,,看评论用的动态规划，不是很理解，贴上代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] input)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Write your code here</span></span><br><span class="line">	<span class="keyword">int</span> n = input.length; <span class="comment">//n为石块数</span></span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">0</span>; <span class="comment">//s记录总重量，题解要尽可能满足两边平均</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		s += input[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> S = s &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> N = (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[S + <span class="number">1</span>][N+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= S; ++i) dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span>[][] tmp=dp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = input[i]; j &lt;= S; ++j) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= N; ++k) &#123;</span><br><span class="line">				tmp[j][k] = Math.max(tmp[j][k], dp[j - input[i]][k - <span class="number">1</span>] + input[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		dp=tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((n &amp; <span class="number">1</span>)==<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> s - <span class="number">2</span> * Math.max(dp[S][N], dp[S][N - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s - <span class="number">2</span> * dp[S][N];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>OJ</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>优化网站加载速度的34条法则，Yahoo!</title>
    <url>/2020/03/05/%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E7%9A%8434%E6%9D%A1%E6%B3%95%E5%88%99,%20Yahoo!/</url>
    <content><![CDATA[<h3 id="1-Minimize-HTTP-Requests-减少-HTTP-请求"><a href="#1-Minimize-HTTP-Requests-减少-HTTP-请求" class="headerlink" title="1.Minimize HTTP Requests　　减少 HTTP 请求"></a>1.Minimize HTTP Requests　　减少 HTTP 请求</h3><p>　　图片、css、script、flash等等这些都会增加http请求数，减少这些元素的数量就能减少响应时间。把多个JS、CSS在可能的情况下写进一个文件，页面里直接写入图片也是不好的做法，应该写进CSS里，利用 CSS sprites 将小图拼合后利用background来定位。</p>
<h3 id="2-Use-a-Content-Delivery-Network-利用-CDN-技术"><a href="#2-Use-a-Content-Delivery-Network-利用-CDN-技术" class="headerlink" title="2.Use a Content Delivery Network　　利用 CDN 技术"></a>2.Use a Content Delivery Network　　利用 CDN 技术</h3><h3 id="3-Add-an-Expires-or-a-Cache-Control-Header-设置头文件过期或者静态缓存"><a href="#3-Add-an-Expires-or-a-Cache-Control-Header-设置头文件过期或者静态缓存" class="headerlink" title="3.Add an Expires or a Cache-Control Header　　设置头文件过期或者静态缓存"></a>3.Add an Expires or a Cache-Control Header　　设置头文件过期或者静态缓存</h3><p>　　浏览器会用缓存来减少http请求数来加快页面加载的时间，如果页面头部加一个很长的过期时间，浏览器就会一直缓存页面里的元素。不过这样如果页面里的东西变动的话就要改名字了，否则用户端不会主动刷新，看自己衡量了~ 这项可以通过修改.htaccess文件来实现。<br><a id="more"></a></p>
<h3 id="4-Gzip-Components-Gzip压缩"><a href="#4-Gzip-Components-Gzip压缩" class="headerlink" title="4.Gzip Components　　Gzip压缩"></a>4.Gzip Components　　Gzip压缩</h3><p>　　Gzip格式是一种很普遍的压缩技术，几乎所有的浏览器都有解压Gzip格式的能力，而且它可以压缩的比例非常大，一般压缩率为85%。压缩没压缩，可以到 这里 做下测试。</p>
<h3 id="5-Put-Stylesheets-at-the-Top-把CSS放顶部"><a href="#5-Put-Stylesheets-at-the-Top-把CSS放顶部" class="headerlink" title="5.Put Stylesheets at the Top　　把CSS放顶部"></a>5.Put Stylesheets at the Top　　把CSS放顶部</h3><p>　　让浏览者能尽早的看到网站的完整样式。</p>
<h3 id="6-Put-Scripts-at-the-Bottom-把-JS-放底部"><a href="#6-Put-Scripts-at-the-Bottom-把-JS-放底部" class="headerlink" title="6.Put Scripts at the Bottom　　把 JS 放底部"></a>6.Put Scripts at the Bottom　　把 JS 放底部</h3><p>　　网站呈现完毕后再进行功能设置，当然这些JS要在你的加载过程中不影响内容表现。</p>
<h3 id="7-Avoid-CSS-Expressions-避免-CSS-Expressions"><a href="#7-Avoid-CSS-Expressions-避免-CSS-Expressions" class="headerlink" title="7.Avoid CSS Expressions　　避免 CSS Expressions"></a>7.Avoid CSS Expressions　　避免 CSS Expressions</h3><p>　　CSS表达式很可怕，这个只被IE支持的东西执行时候的运算量非常大，你移动一下鼠标它都要进行重计算的，但有时候为了做浏览器的兼容必须要用到这个</p>
<h3 id="8-Make-JavaScript-and-CSS-External-将-JS-和-CSS-外链"><a href="#8-Make-JavaScript-and-CSS-External-将-JS-和-CSS-外链" class="headerlink" title="8.Make JavaScript and CSS External　　将 JS 和 CSS 外链"></a>8.Make JavaScript and CSS External　　将 JS 和 CSS 外链</h3><p>　　前面讲到了缓存这个事情，一些较为公用的JS和CSS，我们可以使用外链的形式，譬如我就是从Google外链来的jQuery文件，如果我的浏览者在浏览别的使用了这个外链文件的网站时已经下载并缓存了这个文件，那么他在浏览我的网站的时候就不需要再进行下载了！~</p>
<h3 id="9-Reduce-DNS-Lookups-减少DNS查找"><a href="#9-Reduce-DNS-Lookups-减少DNS查找" class="headerlink" title="9.Reduce DNS Lookups　　减少DNS查找"></a>9.Reduce DNS Lookups　　减少DNS查找</h3><p>　　貌似是要减少网站从外部调用资源，我的Google分析和picasa的外链图片都算在里面了。</p>
<h3 id="10-Minify-JavaScript-and-CSS-减小-JS-和-CSS-的体积"><a href="#10-Minify-JavaScript-and-CSS-减小-JS-和-CSS-的体积" class="headerlink" title="10.Minify JavaScript and CSS　　减小 JS 和 CSS 的体积"></a>10.Minify JavaScript and CSS　　减小 JS 和 CSS 的体积</h3><p>　　写JS和CSS都是有技巧的，用最少的代码实现同样的功能，减少空白，增强逻辑性，用缩写方式等等，当然也有不少工具也能够帮你实现</p>
<h3 id="11-Avoid-Redirects-避免重定向"><a href="#11-Avoid-Redirects-避免重定向" class="headerlink" title="11.Avoid Redirects　　避免重定向"></a>11.Avoid Redirects　　避免重定向</h3><p>　　在写入链接时，虽然”<a href="http://www.today-s-ooxx..com&quot;" target="_blank" rel="noopener">http://www.today-s-ooxx..com&quot;</a> 和 “<a href="http://www.today-s-ooxx..com/&quot;" target="_blank" rel="noopener">http://www.today-s-ooxx..com/&quot;</a> 仅有一个最后的”/”只差，但是结果是不同的，服务器需要花时间把前者重定向为后者然后进行跳转，这个要自己注意，也可以在Apache里用Alias 或者mod_rewrite或者DirectorySlash解决。</p>
<h3 id="12-Remove-Duplicate-Scripts-删除重复脚本"><a href="#12-Remove-Duplicate-Scripts-删除重复脚本" class="headerlink" title="12.Remove Duplicate Scripts　　删除重复脚本"></a>12.Remove Duplicate Scripts　　删除重复脚本</h3><p>　　重复调用的代码浏览器并不会识别忽略，而是会再次运算一遍，这当然是大大的浪费。</p>
<h3 id="13-Configure-ETags-配置-ETags"><a href="#13-Configure-ETags-配置-ETags" class="headerlink" title="13.Configure ETags　　配置 ETags"></a>13.Configure ETags　　配置 ETags</h3><p>　　搞不清楚咋回事，总之我是在.htaccess里把它删除了。</p>
<h3 id="14-Make-Ajax-Cacheable-缓存-Ajax"><a href="#14-Make-Ajax-Cacheable-缓存-Ajax" class="headerlink" title="14.Make Ajax Cacheable　　缓存 Ajax"></a>14.Make Ajax Cacheable　　缓存 Ajax</h3><p>　　Ajax是实时响应的，在浏览器接收到新的数据前，旧的数据被缓存，这样能够更好的提高效率。</p>
<h3 id="15-Flush-the-Buffer-Early-尽早的释放缓冲"><a href="#15-Flush-the-Buffer-Early-尽早的释放缓冲" class="headerlink" title="15.Flush the Buffer Early　　尽早的释放缓冲"></a>15.Flush the Buffer Early　　尽早的释放缓冲</h3><p>　　当用户进行页面请求时，服务器端需要花费200到500毫秒时间来拼合HTML，将写在head与body之间，释放缓冲，这样可以将文件头先发送出去，然后再发送文件内容，提高效率。</p>
<h3 id="16-Use-GET-for-AJAX-Requests-用-GET-方式进行-AJAX-请求"><a href="#16-Use-GET-for-AJAX-Requests-用-GET-方式进行-AJAX-请求" class="headerlink" title="16.Use GET for AJAX Requests　　用 GET 方式进行 AJAX 请求"></a>16.Use GET for AJAX Requests　　用 GET 方式进行 AJAX 请求</h3><p>　　Get 方法和服务器只有一次交互（发送数据），而 Post 要两次（发送头部再发送数据）。</p>
<h3 id="17-Post-load-Components-延迟加载组件"><a href="#17-Post-load-Components-延迟加载组件" class="headerlink" title="17.Post-load Components　　延迟加载组件*"></a>17.Post-load Components　　延迟加载组件*</h3><p>　　最先加载必须的组件进行页面初始化，然后再加载其他，YUI Image Loader 是很好的例子。</p>
<h3 id="18-Preload-components-预加载组件"><a href="#18-Preload-components-预加载组件" class="headerlink" title="18.Preload components　　预加载组件"></a>18.Preload components　　预加载组件</h3><p>　　提前加载以后可能用到的东西，和延迟加载并不冲突，它的目的是为后续请求提供更快的响应，参见Google首页上的CSS sprites应用。</p>
<h3 id="19-Reduce-the-Number-of-DOM-Elements-减少-DOM-元素数量"><a href="#19-Reduce-the-Number-of-DOM-Elements-减少-DOM-元素数量" class="headerlink" title="19.Reduce the Number of DOM Elements　　减少 DOM 元素数量"></a>19.Reduce the Number of DOM Elements　　减少 DOM 元素数量</h3><p>　　复杂的页面结构意味着更长的下载及响应时间，更合理更高效的使用标签来架构页面，是好的前端的必备条件。</p>
<h3 id="20-Split-Components-Across-Domains-跨域分离组件"><a href="#20-Split-Components-Across-Domains-跨域分离组件" class="headerlink" title="20.Split Components Across Domains　　跨域分离组件"></a>20.Split Components Across Domains　　跨域分离组件</h3><p>　　页面组件多个来源可以增大你的平行下载量，但注意不要过多，超过2-4个域名会引起上面说到的DNS查找浪费。</p>
<h3 id="21-Minimize-the-Number-of-iframes-减少-iframe-数量"><a href="#21-Minimize-the-Number-of-iframes-减少-iframe-数量" class="headerlink" title="21.Minimize the Number of iframes　　减少 iframe 数量"></a>21.Minimize the Number of iframes　　减少 iframe 数量</h3><p>　　需要更有效的利用 ifames。<br>　　iframe 优点：有利于下载缓慢的广告等第三方内容，安全沙箱，并行下载脚本<br>　　iframe 缺点：即使为空也会有较大资源消耗，会阻止页面的onload，非语义</p>
<h3 id="22-No-404s-不要出现-404-页面"><a href="#22-No-404s-不要出现-404-页面" class="headerlink" title="22.No 404s　　不要出现 404 页面"></a>22.No 404s　　不要出现 404 页面</h3><p>　　站点本身里（非搜索结果）出现404页面，无意义的404页面会影响用户体验并且会消耗服务器资源。</p>
<h3 id="23-Reduce-Cookie-Size-减小-Cookie"><a href="#23-Reduce-Cookie-Size-减小-Cookie" class="headerlink" title="23.Reduce Cookie Size　　减小 Cookie"></a>23.Reduce Cookie Size　　减小 Cookie</h3><p>　　Cookie在服务器及浏览器之间的通过文件头进行交换，尽可能减小Cookie体积，设置合理的过期时间，能够很好的提高效率。</p>
<h3 id="24-Use-Cookie-free-Domains-for-Components-对组件使用无Cookie的域名"><a href="#24-Use-Cookie-free-Domains-for-Components-对组件使用无Cookie的域名" class="headerlink" title="24.Use Cookie-free Domains for Components　　对组件使用无Cookie的域名"></a>24.Use Cookie-free Domains for Components　　对组件使用无Cookie的域名</h3><p>　　对静态组件的Cookie读取是一种浪费，使用另一个无Cookie的域名来存放你的静态组件式一个好方法，或者也可以在Cookie中只存放带www的域名。</p>
<h3 id="25-Minimize-DOM-Access-减少DOM的访问次数"><a href="#25-Minimize-DOM-Access-减少DOM的访问次数" class="headerlink" title="25.Minimize DOM Access　　减少DOM的访问次数"></a>25.Minimize DOM Access　　减少DOM的访问次数</h3><p>　　JS访问DOM是很慢的，尽量不要用JS来设置页面布局。</p>
<h3 id="26-Develop-Smart-Event-Handlers-开发灵活的事件处理句柄"><a href="#26-Develop-Smart-Event-Handlers-开发灵活的事件处理句柄" class="headerlink" title="26.Develop Smart Event Handlers　　开发灵活的事件处理句柄"></a>26.Develop Smart Event Handlers　　开发灵活的事件处理句柄</h3><p>　　DOM树上过多的元素被加入事件句柄的话，反应效率肯定会低，YUI事件工具有一个 onAvailable 方法可以帮助你灵活的设置DOM事件句柄</p>
<h3 id="27-Choose-lt-link-gt-over-import-使用-而非-import"><a href="#27-Choose-lt-link-gt-over-import-使用-而非-import" class="headerlink" title="27.Choose &lt; link &gt;over @import　　使用 而非 @import"></a>27.Choose &lt; link &gt;over @import　　使用 <link>而非 @import</h3><p>　　在IE中使用@import就和在页面底部用&lt; link &gt;一样，我们前面说要把&lt; link &gt;放顶部的。</p>
<h3 id="28-Avoid-Filters-避免过滤器的使用"><a href="#28-Avoid-Filters-避免过滤器的使用" class="headerlink" title="28.Avoid Filters　　避免过滤器的使用"></a>28.Avoid Filters　　避免过滤器的使用</h3><p>　　如果需要Alpha透明，不要使用AlphaImageLoader，它效率低下而且只对IE6及以下的版本适用，用PNG8图片。如果你非要使用，加上_filter以免影响IE7+用户。</p>
<h3 id="29-Optimize-Images-优化图片"><a href="#29-Optimize-Images-优化图片" class="headerlink" title="29.Optimize Images　　优化图片"></a>29.Optimize Images　　优化图片</h3><p>　　将你的GIF转为PNG8会是个减小体积的好办法，另外有很多方法处理你的JPG及PNG图片以达到优化效果。</p>
<h3 id="30-Optimize-CSS-Sprites-优化-CSS-精灵图"><a href="#30-Optimize-CSS-Sprites-优化-CSS-精灵图" class="headerlink" title="30.Optimize CSS Sprites　　优化 CSS 精灵图"></a>30.Optimize CSS Sprites　　优化 CSS 精灵图</h3><p>　　在CSS 精灵图中竖直并尽量紧凑的排列图片，尽量将颜色相似的图片排在一起，会减小图片本身的大小及提高页面图片显示速度。</p>
<h3 id="31-Don’t-Scale-Images-in-HTML-不要在-HTML中-缩放图片"><a href="#31-Don’t-Scale-Images-in-HTML-不要在-HTML中-缩放图片" class="headerlink" title="31.Don’t Scale Images in HTML　　不要在 HTML中 缩放图片"></a>31.Don’t Scale Images in HTML　　不要在 HTML中 缩放图片</h3><p>　　图片要用多大的就用多大的，1000X1000的图片被width=”100″ height=”100″以后，本身的KB数是不会减少的。</p>
<h3 id="32-Make-favicon-ico-Small-and-Cacheable-缩小favicon-ico的大小并缓存它"><a href="#32-Make-favicon-ico-Small-and-Cacheable-缩小favicon-ico的大小并缓存它" class="headerlink" title="32.Make favicon. ico Small and Cacheable　　缩小favicon. ico的大小并缓存它"></a>32.Make favicon. ico Small and Cacheable　　缩小favicon. ico的大小并缓存它</h3><p>　　站点的浏览器ICO应该不是经常换吧，那就长时间的缓存它，并且最好控制在1K以下。</p>
<h3 id="33-Keep-Components-under-25K-保证组件在25K以下"><a href="#33-Keep-Components-under-25K-保证组件在25K以下" class="headerlink" title="33.Keep Components under 25K　　保证组件在25K以下"></a>33.Keep Components under 25K　　保证组件在25K以下</h3><p>　　iPhone不能缓存25K以上的组件，并且这还是要在被压缩前。</p>
<h3 id="34-Pack-Components-into-a-Multipart-Document-将组件打包进一个多部分的文档中"><a href="#34-Pack-Components-into-a-Multipart-Document-将组件打包进一个多部分的文档中" class="headerlink" title="34.Pack Components into a Multipart Document　将组件打包进一个多部分的文档中"></a>34.Pack Components into a Multipart Document　将组件打包进一个多部分的文档中</h3><p>　　就好像在邮件中加入附件一样，一个HTTP请求就够了，但是这一技术需要确保你的代理支持，iPhone就不支持。</p>
<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p>原文地址：<a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">Best Practices for Speeding Up Your Web Site</a></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客</title>
    <url>/2018/04/28/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<pre><code>考研录取后赋闲在家，闲来无事。
</code></pre><p>&emsp;&emsp;在过去一段时间内，我从很多优秀的博客学到了很多，深深感谢那些博主通过博客帮助了很多求学的人。<br>&emsp;&emsp;于是也就有个建立博客的念头，在前几日看到weiyang大佬的搭建博客的文章，便着手搭建这个博客，感谢现在互联网的便利，通过github+hexo，以及众多博主的经验分享，综合选择了NexT主题，终于搭建了这个小窝。希望能督促自己,并分享自己今后的生活与学习，也欢迎各位小伙伴的交流。<br>&emsp;&emsp;在此贴出一些学习的文章，希望想搭建博客的小伙伴可以学习。</p>
<p>&emsp;&emsp;博文文章：<br>&emsp;&emsp;&emsp;&emsp;<a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://blog.csdn.net/w_ngzeqi/article/details/73863543" target="_blank" rel="noopener">hexo之next主题个性化配置详细教程</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://blog.csdn.net/shengshengshiwo/article/details/79350413" target="_blank" rel="noopener">NexT的主题设定与配置</a><br>&emsp;&emsp;&emsp;&emsp;<a href="http://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://blog.csdn.net/blue_zy/article/details/79058763" target="_blank" rel="noopener">Hexo更换next主题和优化</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有哪些好看的 Hexo 主题？</a></p>
<p>&emsp;&emsp;后期陆续补充。。。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>djwang</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博文</title>
    <url>/2018/04/26/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
    <content><![CDATA[<!-- 标签别名 -->
<blockquote class="blockquote-center"><p>小帅哥快来玩呀 <br>本文测试用</p>
</blockquote>
<a id="more"></a>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"这里是djwang's blog。"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>\(y = f(x)\)<br>$\int^2_3 x^2 {\rm d}x$<br>$\frac{7x+5}{1+y^2}$<br>$\frac{d}{dx}e^{ax}=ae^{ax}\quad \sum_{i=1}^{n}{(X_i - \overline{X})^2}$<br>$\ln15$  $$\log_2 10$$ <!-- 单$为行内，双$为整行 --><br><a href="https://blog.csdn.net/zdk930519/article/details/54137476" target="_blank" rel="noopener">Markdown中数学公式整理</a></p>
<h3 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h3><center><br><div style="bottom: 120px; width:310px; heigh:80px;"><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="200" height="86" src="//music.163.com/outchain/player?type=2&id=536622304&auto=1&height=66"></iframe><br></div></center>

<p><img src="/images/IMG_20170420_164916.jpg" alt="我们毕业了"> </p>
<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center">我们毕业了</blockquote>

<!-- 标签 方式，要求版本在0.4.5或以上 -->
<blockquote class="blockquote-center"><p>如有纠正，欢迎指出</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
